#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:nil creator:nil timestamp:nil toc:nil html-style:nil

#+TITLE: The Monty Hall Problem
#+AUTHOR: James Brown

#+BEGIN_EXPORT html
 <div class="ribbon">
      <a href="https://github.com/stsb11/9-CS-gameTheory">Fork me on GitHub</a>
    </div>

<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="evaluation.html">Evaluation</a></li>
    </ul>
  </div>


<div id="underlay" onclick="underlayoff()">
</div>
<div id="overlay" onclick="overlayoff()">
</div>
<div id=overlayMenu>
<p onclick="overlayon('hsla(0, 0%, 50%, 0.5)')">Grey overlay</p>
<p onclick="underlayon('hsla(300,100%,50%, 0.3)')">Pink</p>
<p onclick="underlayon('hsla(80, 90%, 40%, 0.4)')">Green</p>
<p onclick="underlayon('hsla(240,100%,50%,0.2)')">Blue</p>
<p onclick="underlayon('hsla(40,100%,50%,0.3)')">Cream</p>
<p onclick="underlayon('hsla(300,100%,40%,0.3)')">Liliac</p>
<p onclick="underlayon('hsla(300,100%,25%,0.3)')">Purple</p>
<p onclick="underlayon('hsla(60,100%,50%,0.3)')">Yellow</p>
</div>
#+END_EXPORT

* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Objectives
:PROPERTIES:
:HTML_CONTAINER_CLASS: objectives
:END:
** Developing the *Programming and Development* and *Algorithm* learning strands, specifically:
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
+ Understand the difference between, and appropriately use *if* statements when checking doors in your simulation.
+ Use variables and relational operators within a *loop* to govern the end of your Monty Hall Problem game. 
+ Designs solutions (algorithms) that use repetition and two-way selection i.e. *if, then and else*. 
* Introduction: The Monty Hall problem
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:
- Watch the video.
#+BEGIN_EXPORT html 
<iframe width="560" height="315" src="https://www.youtube.com/embed/_X5erR9LKUs" frameborder="0" allowfullscreen></iframe>
#+END_EXPORT
- Talk with the person next to you about the following questions:
- What is the problem?
- Should you swap, stick with your choice or does it make no difference?
- What is the correct choice? Can you explain why?
** Learn It: The Monty Hall Problem
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- The Monty Hall Problem is probability puzzle based on an American TV game show "Let's Make a Deal" and is named after its host, Monty Hall. 
- The problem was originally posed (and solved) in a letter by Steve Selvin to the American Statistician in 1975.
- The problem was as follows:

#+BEGIN_SRC
Suppose you're on a game show, and you're given the choice of three doors:
Behind one door is a car; behind the others, goats. You pick a door, say No. 1,
and the host, who knows what's behind the doors, opens another door, say No. 3, 
which has a goat. He then says to you, "Do you want to pick door No. 2?" 
Is it to your advantage to switch your choice?
#+END_SRC

- Do you think you should switch your choice or stick with your 1st choice?
- You and most people think they should stick. 
- But as the video above video shows contestants who *switch have a 2/3 chance of winning the car*, while contestants who *stick to their initial choice have only a 1/3 chance.*
- Paul Erdos, one of the most prolific mathematicians in history, remained unconvinced this was true until he was shown a computer simulation demonstrating the predicted result.
[[./img/montyHallVisual.png]]
- The image shows the three initial configurations of the game. In two of them, the player wins by switching away from the choice made before a door was opened.

** Code It - List Popping
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Using Python we're going to make our own Monty Hall Problem game.
- First of all we need to learn a new command when using lists, *.pop()*.
- Pop is used with lists to "pop off" or delete the last item in a list.

- Example code for popping a list can be seen in the Trinket below:
#+BEGIN_EXPORT html 
<iframe src="https://trinket.io/embed/python/bd21bd8517" width="100%" height="600" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen></iframe>
#+END_EXPORT
- Experiment with the code above to change the list and add new items to it.
- Try using *.pop(3)* this will delete the 3rd element of the list.

** Code It - The Monty Hall Problem Simulation
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Now it's time to do our own *simulation* of the Monty Hall Problem, to prove that you should always switch your choice.
- Your going to complete some code so that you can simulate *10000 games* of the problem at a time.
- You'll then see the probability of the two choices of switching and staying.
- Use the below Trinket and tasks to help you complete the badges for this week.
#+BEGIN_EXPORT html 
<iframe src="https://trinket.io/embed/python/1ef41578f9" width="100%" height="600" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen></iframe>
#+END_EXPORT
** Badge It: Silver
:PROPERTIES:
:HTML_CONTAINER_CLASS: silver
:END:
+ Using the Trinket *above* as a starting point and using the *comments to guide you*, make a simulation of the Monty Hall Problem in python.
+ It should end up around 2/3 winning with switching and 1/3 with staying.
+ Screenshot your complete code for the Silver badge.
** Badge It: Gold
:PROPERTIES:
:HTML_CONTAINER_CLASS: gold
:END:
- For Gold you are going to comment on a version of the game where you play a round of the game like a player would in real life.
- Modify the code below to add a comment to each line, using a #, indicating what is happenning on that line.
- For example, for *door = [1,2,3]* you could add *# A list called door is created containing the integers 1,2 and 3.* 

#+BEGIN_EXPORT html 
<iframe src="https://trinket.io/embed/python/216bd8ecc2" width="100%" height="600" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen></iframe>
#+END_EXPORT

** Badge It: Platinum
:PROPERTIES:
:HTML_CONTAINER_CLASS: platinum
:END:
- Using the code given to you in the Gold badge add *print* commands to show a visual version of your doors at each stage of the game.
- Use google to research ASCII art to see how you can use characters to make simple graphics.
- An example output is shown below:
[[./img/ASCII_Art.png]]
