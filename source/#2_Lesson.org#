ho#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:nil creator:nil timestamp:nil toc:nil html-style:nil

#+TITLE: The Prisoner's Dilemma
#+AUTHOR: James Brown


#+BEGIN_EXPORT html

    <div class="ribbon">
      <a href="https://github.com/stsb11/9-CS-gameTheory">Fork me on GitHub</a>
    </div>

<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="evaluation.html">Evaluation</a></li>
    </ul>
  </div>


<div id="underlay" onclick="underlayoff()">
</div>
<div id="overlay" onclick="overlayoff()">
</div>
<div id=overlayMenu>
<p onclick="overlayon('hsla(0, 0%, 50%, 0.5)')">Grey overlay</p>
<p onclick="underlayon('hsla(300,100%,50%, 0.3)')">Pink</p>
<p onclick="underlayon('hsla(80, 90%, 40%, 0.4)')">Green</p>
<p onclick="underlayon('hsla(240,100%,50%,0.2)')">Blue</p>
<p onclick="underlayon('hsla(40,100%,50%,0.3)')">Cream</p>
<p onclick="underlayon('hsla(300,100%,40%,0.3)')">Liliac</p>
<p onclick="underlayon('hsla(300,100%,25%,0.3)')">Purple</p>
<p onclick="underlayon('hsla(60,100%,50%,0.3)')">Yellow</p>
</div>
#+END_EXPORT

* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Objectives
:PROPERTIES:
:HTML_CONTAINER_CLASS: objectives
:END:
** Developing the *Programming and Development* and *Algorithm* learning strands, specifically:
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
+ Understands the difference between, and appropriately uses *if* and *if-then* and *else* statements.
+ Uses a variable and relational operators within a *loop* to govern termination. 
+ Designs solutions (algorithms) that use repetition and two-way selection i.e. *if, then and else*. 
* Introduction
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- The Prisoner's Dilemma is probably the most popular example of game theory in action. It demonstrates that people don't always act in their own best interests. 

#+BEGIN_EXPORT html
<iframe width="560" height="315" src="https://www.youtube.com/embed/t9Lo2fgxWHw" frameborder="0" allowfullscreen></iframe>
#+END_EXPORT

- Imagine that two people have been arrested for a crime, and the police are uncertain which person committed the crime and which person helped carry it out. 
- Each prisoner is put into a different room and given a choice: 
     - Remain silent
     - Betray your parter
- If both stay silent, they will both be sent to prison for *1 year*.
- If they both betray one another, they can both be sent away for *3 years*.
- If one betrays the other, the betrayer goes *free*, and the other is imprisoned for *5 years*.

- The lowest total amount of prison time somes from both parties cooperating, /but/ there's always the risk that the other person might not be as kind of you. 
- This becomes more interesting if we play the game once, then immediately play it again. Each player will now have a knowledge of how the other person behaved last time, and this will influence their decision making process. 
- If we assign points (based on minimizing time in jail), we can develop different game strategies to minimize the time the human player stays in jail over multiple games. 
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- The same idea can be seen in different places in human society. 
- Imagine a pair of competing fizzy drinks manufacturers. They both have two options when considering the sales of their products:
    - *Option 1:* Don't spend money on advertising. People know your product already, and are currently buying it at a steady rate. 
    - *Option 2:* Spend money on advertising. It'll cost money, but sales will increase.
- If both companies cooperate (option 1), they'll both enjoy steady profits and won't have to spend thousands of pounds on advertising.
- If one advertises and the other doesn't, one company will see their sales increase as the other company's sales (and profits) drop. 
- If both companies advertise, the effects of them both advertising will cancel each other out, and both companies will see their overall profits drop because of the money they're spending on advertising. 
- In real life, competing companies tend to advertise aggressively. 
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- In a new browser tab, open [[https://scratch.mit.edu/projects/84074310/#editor][this link]] to see a prisoner's dilemma simulator
- If you've a Scratch account, you can sign in to save the work you'll do here.
- If you've not got one, you can always click 'File -> Download to your computer' when you're finished to ensure your work is saved.
- Unfortunately, it looks like the developer didn't have time to finish the code, and there are some blanks. 
- Based on the rules set out above, can you complete the code and make the game work?
** Badge It - Silver
:PROPERTIES:
:HTML_CONTAINER_CLASS: silver
:END:
*Learning Strand: Programming and Development*
- Finish the Scratch code so that the game works as intended.
- Upload a screenshot of the complete and working code for your Silver badge.
** Badge It - Gold
:PROPERTIES:
:HTML_CONTAINER_CLASS: gold
:END:
*Learning Strand: Algorithms*
- Change the Scratch code so that when you play against the cat it never betrays you and always let's you off with the best result for you.
- Upload a screenshot of the complete and working code for your Gold badge.
** Badge It - Platinum
:PROPERTIES:
:HTML_CONTAINER_CLASS: platinum
:END:
*Learning Strand: Programming and Development*
- For your Platinum badge you need to make the cat remember your previous move and have it take revenge for that move.
- For example, if you chose to betray last time then the cat will know this and choose the option that is best for it in that scenario.
- Upload a screenshot of the complete and working code for your Silver badge.
