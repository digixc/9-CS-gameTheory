<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>The Monty Hall Problem</title>
<meta name="generator" content="Org mode" />
<link rel="stylesheet" type="text/css" href="css/styles.css"/>
<link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
<script src="js/navbar.js" type="text/javascript"></script>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2019 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<h1 class="title">The Monty Hall Problem</h1>
 <div class="ribbon">
      <a href="https://github.com/stsb11/9-CS-gameTheory">Fork me on GitHub</a>
    </div>

<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="evaluation.html">Evaluation</a></li>
    </ul>
  </div>


<div id="underlay" onclick="underlayoff()">
</div>
<div id="overlay" onclick="overlayoff()">
</div>
<div id=overlayMenu>
<p onclick="overlayon('hsla(0, 0%, 50%, 0.5)')">Grey overlay</p>
<p onclick="underlayon('hsla(300,100%,50%, 0.3)')">Pink</p>
<p onclick="underlayon('hsla(80, 90%, 40%, 0.4)')">Green</p>
<p onclick="underlayon('hsla(240,100%,50%,0.2)')">Blue</p>
<p onclick="underlayon('hsla(40,100%,50%,0.3)')">Cream</p>
<p onclick="underlayon('hsla(300,100%,40%,0.3)')">Liliac</p>
<p onclick="underlayon('hsla(300,100%,25%,0.3)')">Purple</p>
<p onclick="underlayon('hsla(60,100%,50%,0.3)')">Yellow</p>
</div>

<div id="outline-container-org2be3147" class="outline-2 objectives">
<h2 id="org2be3147">Objectives</h2>
<div class="outline-text-2" id="text-org2be3147">
</div>
<div id="outline-container-org3888d71" class="outline-3 learn">
<h3 id="org3888d71">Developing the <b>Programming and Development</b> and <b>Algorithm</b> learning strands, specifically:</h3>
<div class="outline-text-3" id="text-org3888d71">
<ul class="org-ul">
<li>Understand the difference between, and appropriately use <b>if</b> statements when checking doors in your simulation.</li>
<li>Use variables and relational operators within a <b>loop</b> to govern the end of your Monty Hall Problem game.</li>
<li>Designs solutions (algorithms) that use repetition and two-way selection i.e. <b>if, then and else</b>.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org8e26707" class="outline-2 activity">
<h2 id="org8e26707">Introduction: The Monty Hall problem</h2>
<div class="outline-text-2" id="text-org8e26707">
</div>
<div id="outline-container-org8a8bacd" class="outline-3 document">
<h3 id="org8a8bacd">Document It</h3>
<div class="outline-text-3" id="text-org8a8bacd">
<ul class="org-ul">
<li>Watch the video.</li>
</ul>
<iframe width="560" height="315" src="https://www.youtube.com/embed/_X5erR9LKUs" frameborder="0" allowfullscreen></iframe>
<ul class="org-ul">
<li>Talk with the person next to you about the following questions:</li>
<li>What is the problem?</li>
<li>Should you swap, stick with your choice or does it make no difference?</li>
<li>What is the correct choice? Can you explain why?</li>
</ul>
</div>
</div>
<div id="outline-container-org299dccd" class="outline-3 learn">
<h3 id="org299dccd">Learn It: The Monty Hall Problem</h3>
<div class="outline-text-3" id="text-org299dccd">
<ul class="org-ul">
<li>The Monty Hall Problem is probability puzzle based on an American TV game show "Let's Make a Deal" and is named after its host, Monty Hall.</li>
<li>The problem was originally posed (and solved) in a letter by Steve Selvin to the American Statistician in 1975.</li>
<li>The problem was as follows:</li>
</ul>

<pre class="example">
Suppose you're on a game show, and you're given the choice of three doors: Behind one door is a car; behind the others, goats. You pick a door, say No. 1, and the host, who knows what's behind the doors, opens another door, say No. 3, which has a goat. He then says to you, "Do you want to pick door No. 2?" Is it to your advantage to switch your choice?
</pre>

<ul class="org-ul">
<li>Do you think you should switch your choice or stick with your 1st choice?</li>
<li>You and most people think they should stick.</li>
<li>But as the video above video shows contestants who switch have a 2/3 chance of winning the car, while contestants who stick to their initial choice have only a 1/3 chance.</li>
<li>Paul Erd≈ës, one of the most prolific mathematicians in history, remained unconvinced this was true until he was shown a computer simulation demonstrating the predicted result.</li>
</ul>
</div>
</div>

<div id="outline-container-org57be44e" class="outline-3 code">
<h3 id="org57be44e">Code It - List Popping</h3>
<div class="outline-text-3" id="text-org57be44e">
<ul class="org-ul">
<li>Using Python we're going to make our own Monty Hall Problem game.</li>
<li>First of all we need to learn a new command when using lists, <b>.pop()</b>.</li>
<li>Pop is used with lists to "pop off" or delete the last item in a list.</li>

<li>Example code for popping a list can be seen in the Trinket below:</li>
</ul>
<iframe src="https://trinket.io/embed/python/bd21bd8517" width="100%" height="600" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen></iframe>
<ul class="org-ul">
<li>Experiment with the code above to change the list and add new items to it.</li>
<li>Try using <b>.pop(3)</b> this will delete the 3rd element of the list.</li>
</ul>
</div>
</div>

<div id="outline-container-org9e50ab1" class="outline-3 code">
<h3 id="org9e50ab1">Code It - The Monty Hall Problem Simulation</h3>
<div class="outline-text-3" id="text-org9e50ab1">
<ul class="org-ul">
<li>Now it's time to do our own simulation of the Monty Hall Problem, to prove that you should always switch your choice.</li>
<li>Your going to complete some code so that you can simulate 1000 games of the problem at a time.</li>
<li>You'll then see the probability of the two choices of switching and staying.</li>
<li>Use the below Trinket and tasks to help you complete the badges for this week.</li>
</ul>
<iframe src="https://trinket.io/embed/python/1ef41578f9" width="100%" height="600" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen></iframe>
</div>
</div>
<div id="outline-container-org0fc9fda" class="outline-3 silver">
<h3 id="org0fc9fda">Badge It: Silver</h3>
<div class="outline-text-3" id="text-org0fc9fda">
<ul class="org-ul">
<li>Using the Trinket above as a <b>starting point</b> and using the <b>comments to guide you</b>, make a simulation of the Monty Hall Problem in python.</li>
<li>It should end up around 2/3 winning with switching and 1/3 with staying.</li>
<li>Screenshot your complete code for the Silver badge.</li>
</ul>
</div>
</div>
<div id="outline-container-orgf3fe04d" class="outline-3 gold">
<h3 id="orgf3fe04d">Badge It: Gold</h3>
<div class="outline-text-3" id="text-orgf3fe04d">
<ul class="org-ul">
<li>For Gold you are going to create a version of the game where you play a round of the game like a player would in real life.</li>
<li>Modify the Trinket code below so that your Monty Hall Problem game works correctly and fulfills the following requirements:
<ul class="org-ul">
<li>You have a <b>randomly shuffled list</b> of your three doors.</li>
<li>You can choose which door to stick with first.</li>
<li>A non car door is opened automatically.</li>
<li>You can then choose to stick or change your door.</li>
<li>You chosen door is opened and you get told what you have won!</li>
</ul></li>
</ul>

<iframe src="https://trinket.io/embed/python/216bd8ecc2" width="100%" height="600" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen></iframe>
</div>
</div>

<div id="outline-container-org9ddabe4" class="outline-3 platinum">
<h3 id="org9ddabe4">Badge It: Platinum</h3>
<div class="outline-text-3" id="text-org9ddabe4">
<ul class="org-ul">
<li>Using the code you created for the Gold badge use <b>print</b> commands to show a visual version of your doors at each stage of the game.</li>
<li>Use google to research ASCII art to see how you can use characters to make simple graphics.</li>
<li>An example output is shown below:</li>
</ul>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
